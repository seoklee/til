# Python Fundamentals


- REPL
	- Read-Eval-Print-Loop
	- python command line read, eval, print, and loop back
	- underscore (_) is useful in python command line.

- Space
	- 4 spaces instead of tabs
	- NEVER mix spaces and tabs

- PEP 8 (Python Style Guide)
	- read it and do it.

- PEP 20 (Zen of Python)
	- live it

- import __
	- importing a library
- from __ import ____
	- import a certain module in a library
- from __ import ____ as ______
	- import a certain module in a library as this name

- // or **
	- integer operations

- scalar types
	- int
		- unlimited precision signed integer
		- int("10000", 3)
			- convert to base 3
	- float
		- 53 bits of binary precision
		- 15 to 16 bits of decimal precisioner
		- 
		- anything with . or e
			- 3e8 or 1.611e-35
		- any operation with int and float will coerce the result to float
	- None
		- abseence of a value
		- nothing displayed @ REPL
	- bool
		- either True or False
			- only 0 is false-y. (Even negative numbers are true-y)
			- only empty list or string are false-y.

- string
	- str, immutable sequence of Unicode codepoint
		- '' for literal
		- BE CONSISTENT.
	- multi line string using leading / terminating """ 
	- or embed newline charact
	- escaping a character using \.
	- raw string does not care about escaping
		- r'kasldfjklas\dsfas\...' 
	- uniform encoding : UTF-8

- byte
	- immutable seqeunce of bytes.
		- ascii-like.
	- byte literal
		- b'data' 
	- need to decode bytes into the string, and encode str to bytes

- list
	- mutable seqeunces of objects

------

- import __
	- omit the .py extension
	
- function
	- implicit return or return without anything will return none

random.py 

~~~ python
	def hello_world():
		print "Hello World"
~~~
~~~
$ python3
>>> import random
>>> random.hello_world()
Hello World
~~~

Or...

~~~
$ python3
>>> from random import hello_world 
>>> hello_world()
Hello World
~~~
	
Notice that you could only run it in REPL. Nothing happens if you run below command.

~~~
$ python3 random
~~~	

What you can do is, you can check the __name__ of the module. Check it out.

random.py 

~~~ python
	def hello_world():
		print ("Hello World")
		
	print (__name__)
~~~

~~~ python
$ pyton3
>>> import words
words
>>> import words

ctrl + d
 
$ python3 random.py
__main__
~~~

So now, you can do something like this.	

~~~ python
	def hello_world():
		print ("Hello World")
		
	if __name__ == '__main__':
		hello_world()
~~~
	
Python module

- convenient import with API

Python script

- convenient execution from command line

Python program

- Perhaps composed of many moudle

You should always combine module and script together.

- make script importable, and vice versa

---------

example code w/ command line argument

~~~python
from urllib.request import urlopen
	

def fetch_word(url):
	with urlopen('url') as story:
		story_word = []
		for line in story:
			line_words = line.decode('utf-8').split()
			for word in line_words:
				story_word.append(word)
	return story_word
		

def print_items(items):
	for item in items  :
		print(item)

		
def main():
	url = sys.argv[1]
	items = fetch_word(url)
	print_word(items)


if __name__ == '__main__':
	main()
~~~

But wait, but you probably cannot use this in REPL without argument.

~~~
>>> from example import main()
>>> main()
ERROR
~~~

Fix below.

~~~python
from urllib.request import urlopen
	

def fetch_word(url):
	with urlopen('url') as story:
		story_word = []
		for line in story:
			line_words = line.decode('utf-8').split()
			for word in line_words:
				story_word.append(word)
	return story_word
		

def print_items(items):
	for item in items  :
		print(item)

		
def main(url):
	items = fetch_word(url)
	print_word(items)


if __name__ == '__main__':
	main(sys.argv[1])
~~~


~~~
>>> from example import main()
>>> main("bakfjklsdfjk.com")
GOOD
~~~

------

For Documentation, Follow Google's Python style guide with docstring. If you follow it, you can use help(funtion_name) and documentation will show up!

------
Shebang

- #!/usr/bin/env python3
	- user does not have to specify "python3 __.py"
	- don't forget chmod!

----

